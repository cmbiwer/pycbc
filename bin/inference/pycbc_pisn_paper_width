#! /usr/bin/env python

import argparse
import logging
import matplotlib as mpl#; mpl.use("Agg")
import matplotlib.cm as cm
import matplotlib.pyplot as plt
import numpy
import pickle
import pycbc
from pycbc import conversions

# command line usage
parser = argparse.ArgumentParser(usage=__file__ + " [--options]",
                                 description=__doc__)
parser.add_argument("--input-files", type=str, nargs="+", required=True,
                    help="Input file.")
parser.add_argument("--output-file", type=str, required=True,
                    help="Path to output plot.")
parser.add_argument("--threshold", type=float, default=0.0)
parser.add_argument("--parameter",
                    choices=["mchirp_src", "mass1_src", "mass2_src",
                             "mchirp", "q",
                             "mass1", "mass2", "distance", "redshift",
                             "chi_eff", "spin1z", "spin2z", "inclination",
                             "coa_phase", "polarization"])
parser.add_argument("--plot-min", type=float, default=None)
parser.add_argument("--plot-max", type=float, default=None)
parser.add_argument("--plot-gap-only", action="store_true")
opts = parser.parse_args()

# set figure parameters
rcParams = {
    "text.usetex": True,
    "figure.dpi": 600,
    "font.size": 10,
    "figure.figsize": (3.375, 2.5),
    "axes.titlesize": 10,
    "axes.labelsize": 10,
    "xtick.labelsize": 8,
    "ytick.labelsize": 8,
    "legend.fontsize": 8,
}
mpl.rcParams.update(rcParams)

# get data from pickle
intervals = []
injected = []
for input_file in opts.input_files:
    intervals_i, injected_i =  pickle.load(open(input_file, "r"))
    intervals += intervals_i
    injected += injected_i

# add q
for inject in injected:
    inject["q"] = conversions.q_from_mass1_mass2(inject["mass1"],
                                                 inject["mass2"])

# get number of injections
n_injections = len(injected)

#cmap_name = "afmhot_r"
cmap_name = "jet"
my_cmap = cm.get_cmap(cmap_name)
norm = mpl.colors.Normalize(0, 35)

parameter = opts.parameter

widths = []

for interval, inject in zip(intervals, injected):

    if abs((interval["mchirp_src_med"] - inject["mchirp_src"]) / inject["mchirp_src"]) < opts.threshold:
        alpha = 0.2
        zorder = 10
    else:
        alpha = 1.0
        zorder = 20

    if opts.plot_gap_only:
        if not (inject["mass1_src"] < 130 and inject["mass1_src"] > 60) and not (inject["mass2_src"] < 130 and inject["mass2_src"] > 60):
            continue

    if (inject["mass1_src"] < 130 and inject["mass1_src"] > 60) and (interval["mass1_src_high"] < 130 and interval["mass1_src_low"] > 60):
        marker = "o"
        color = None #my_cmap(norm(inject[parameter])) # returns an rgba value
    elif (inject["mass2_src"] < 130 and inject["mass2_src"] > 60) and (interval["mass2_src_high"] < 130 and interval["mass2_src_low"] > 60):
        marker = "o"
        color = None #my_cmap(norm(inject[parameter])) # returns an rgba value
    else:
        marker = "x"
        color = "k"

    width = interval[parameter + "_high"] - interval[parameter + "_low"]
    widths.append(width)
    if color:
        plt.scatter(interval["snr_med"], width, marker=marker,
                    c=color,
                    zorder=zorder + 2, alpha=alpha, s=4)
    else:
        plt.scatter(interval["snr_med"], width, marker=marker,
                    c=inject[parameter], cmap=plt.get_cmap(cmap_name),
                    vmin=0, vmax=130, zorder=zorder + 1, alpha=alpha, s=4)


# get min and max for plotting
y_max = numpy.array(widths).max()
y_min = numpy.array(widths).min()
x_max = numpy.array([intervals[i]["snr_med"] for i in range(n_injections)]).max()
x_min = numpy.array([intervals[i]["snr_med"] for i in range(n_injections)]).min()
plt_min = opts.plot_min if opts.plot_min is not None else min(0.9 * x_min, 1.1 * y_min)
plt_max = opts.plot_max if opts.plot_max is not None else max(0.9 * x_max, 1.1 * y_max)

if parameter.startswith("mass1") or parameter.startswith("mass2"):
    plt.hlines([130 - 60], [plt_min], plt_max, "r",
               linestyle="dashed")

if opts.parameter == "mass1_src":
    y_label = r"$m_1^\mathrm{src}$"
elif opts.parameter == "mass2_src":
    y_label = r"$m_2^\mathrm{src}$"
elif opts.parameter == "mass1":
    y_label = r"$m_1^\mathrm{det}$"
elif opts.parameter == "mass2":
    y_label = r"$m_2^\mathrm{det}$"
else:
    y_label = opts.parameter

plt.subplots_adjust(left=0.2, right=0.9, top=0.9, bottom=0.2)
plt.ylabel(r"90\% Credible Interval Width for " + y_label)
plt.xlabel(r"Median SNR")
plt.ylim(0, 100)
#plt.ylim(plt_min, plt_max)
plt.xlim(0, 35)
plt.grid()
plt.minorticks_on()
#cbar = plt.colorbar()
#cbar.set_label(r"Injected" + y_label)

format = "eps" if opts.output_file.endswith(".eps") else None

plt.savefig(opts.output_file, bbox_inches="tight", format=format)
plt.close()

