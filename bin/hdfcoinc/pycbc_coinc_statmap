#!/bin/env  python
"""
The program combines coincident output files generated
by pycbc_coinc_findtrigs to generated a mapping between SNR and FAP, along
with producing the combined foreground and background triggers
"""
import argparse, h5py, logging, itertools, copy
from scipy.interpolate import interp1d  
from pycbc.future import numpy  
from itertools import izip
    
def load_coincs(coinc_files):
    stat, time1, time2, timeslide_id, template_id, decimation_factor, i1, i2 = [], [], [], [], [], [], [], []
    for cfile in coinc_files:
        try:
            logging.info('reading %s' % cfile)
            f = h5py.File(cfile, "r")
            stat.append(f['stat'][:])
            time1.append(f['time1'][:])
            time2.append(f['time2'][:])
            i1.append(f['trigger_id1'][:])
            i2.append(f['trigger_id2'][:])
            timeslide_id.append(f['timeslide_id'][:])
            template_id.append(f['template_id'][:])
            decimation_factor.append(f['decimation_factor'][:])
            attr = dict(f.attrs)
            
        except:
            continue
    return (numpy.concatenate(stat), numpy.concatenate(time1),
           numpy.concatenate(time2), numpy.concatenate(timeslide_id),
           numpy.concatenate(template_id), numpy.concatenate(decimation_factor),
           numpy.concatenate(i1), numpy.concatenate(i2), attr, 
           f['analyzed_start'][:], f['analyzed_end'][:], 
           )

def cluster_coincs(stat, time1, time2, timeslide_id, slide, window):
    """Cluster coincident events for each timeslide separately, across 
    templates, based on the ranking statistic 
    Return the set of indices corresponding to the surviving coincidences.
    """
    
    logging.info('clustering coinc triggers over %ss window' % window)
    
    indices = []
    if numpy.isfinite(slide):
        time = (time2 + (time1 + timeslide_id * slide)) / 2
    else:
        time = 0.5 * (time2 + time1)
        
    tslide = timeslide_id.astype(numpy.float128)
    time = time.astype(numpy.float128)
    span = (time.max() - time.min()) + window * 10
    time = time + span * tslide
    
    time_sorting = time.argsort()
    stat = stat[time_sorting]
    time = time[time_sorting]
    tslide = tslide[time_sorting]
    
    logging.info('sorting...')
    left = numpy.searchsorted(time, time - window)
    right = numpy.searchsorted(time, time + window)
    logging.info('done sorting')
    indices = []
    for i, (l, r) in enumerate(izip(left, right)):
        if stat[l:r].argmax() + l == i:
            indices += [i]
    logging.info('done clustering coinc triggers: %s triggers remaining' % len(indices))
    return time_sorting[numpy.array(indices)]

def calculate_fan_map(combined_stat, dec):
    """ Return a function to map between false alarm number (FAN) and the
    combined ranking statistic.
    """
    stat_sorting = combined_stat.argsort()    
    combined_stat = combined_stat[stat_sorting]
    fan = dec[stat_sorting][::-1].cumsum()[::-1]    
    return interp1d(combined_stat, fan, fill_value=1, bounds_error=False) 

def sec_to_year(sec):
    return sec / (3.15569e7)

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    # General required options
    parser.add_argument('--coinc-files', nargs='+')
    parser.add_argument('--verbose', action='count')
    parser.add_argument('--cluster-window', type=float, default=0)
    parser.add_argument('--external-background')
    parser.add_argument('--output-file')
    args = parser.parse_args()

    if args.verbose:
        log_level = logging.INFO
        logging.basicConfig(format='%(asctime)s : %(message)s', 
                                level=log_level)
    
    logging.info("Loading coinc triggers")    
    stat, t1, t2, sid, tid, dec, i1, i2, attrs, start, end = load_coincs(args.coinc_files)   
    logging.info("We have %s triggers" % len(stat))

    if args.cluster_window != 0:
        logging.info("Clustering coinc triggers")
        cid = cluster_coincs(stat, t1, t2, sid, 
                             attrs['timeslide_interval'], 
                             args.cluster_window)
        stat, t1, t2, sid, tid, dec, i1, i2 = stat[cid], t1[cid], t2[cid], sid[cid], tid[cid], dec[cid], i1[cid], i2[cid]
        logging.info("We now have %s triggers" % len(stat))

    logging.info("Dumping foreground triggers")
    f = h5py.File(args.output_file, "w")
    
    f.attrs['detector_1'] = attrs['detector_1']
    f.attrs['detector_2'] = attrs['detector_2']
    f.attrs['num_slides'] = attrs['num_slides']
    
    fore_locs = (sid == 0)
    back_locs = numpy.where((sid != 0))[0]
    logging.info("%s foreground triggers" % fore_locs.sum())
    
    if fore_locs.sum() > 0:
        f['foreground/stat'] = stat[fore_locs]
        f['foreground/time1'] = t1[fore_locs]
        f['foreground/time2'] = t2[fore_locs]
        f['foreground/trigger_id1'] = i1[fore_locs]
        f['foreground/trigger_id2'] = i2[fore_locs]
        f['foreground/template_id'] = tid[fore_locs]
        f['foreground/analyzed_start'] = start
        f['foreground/analyzed_end'] = end
    
    if args.external_background:
        # We are using an external background file
        # to calculate the foreground, FAP
        # IFAR, etc
        fb = h5py.File(args.external_background, "r")
        background_time = fb.attrs['background_time']
        coinc_time = float(attrs['coinc_time'])
        back_stat = fb['background/stat'][:]
        fanmap = calculate_fan_map(back_stat, fb['background/decimation_factor'][:])
        
        logging.info("calculating ifar values")
        fore_stat = stat[fore_locs]
        fore_fan = fanmap(fore_stat)
        ifar = background_time / fore_fan

        logging.info("calculating fap values")
        fap = numpy.clip(coinc_time/ifar, 0, 1)
        
        f['foreground/fan'] = fore_fan
        f['foreground/ifar'] = sec_to_year(ifar)
        f['foreground/fap'] = fap
        f.attrs['background_time'] = background_time
        f.attrs['foreground_time'] = coinc_time
            
    elif len(back_locs) > 0:
        logging.info("Dumping background triggers")
        f['background/stat'] = stat[back_locs]
        f['background/time1'] = t1[back_locs]
        f['background/time2'] = t2[back_locs]
        f['background/trigger_id1'] = i1[back_locs]
        f['background/trigger_id2'] = i2[back_locs]
        f['background/timeslide_id'] = sid[back_locs]
        f['background/template_id'] = tid[back_locs]
        f['background/decimation_factor'] = dec[back_locs]
        
        maxtime = max(attrs['foreground_time1'], attrs['foreground_time2'])
        mintime = min(attrs['foreground_time1'], attrs['foreground_time2'])
        
        background_time = int(maxtime / attrs['timeslide_interval']) * mintime
        coinc_time = float(attrs['coinc_time'])
        
        logging.info("Making mapping from FAN to the combined statistic")
        back_stat = stat[back_locs]
        fanmap = calculate_fan_map(back_stat, dec[back_locs])
        
        back_fan = fanmap(back_stat)
        f['background/fan'] = back_fan
        f['background/ifar'] = sec_to_year(background_time / back_fan)

        f.attrs['background_time'] = background_time
        f.attrs['foreground_time'] = coinc_time
        
        logging.info("calculating ifar values")
        fore_stat = stat[fore_locs]
        fore_fan = fanmap(fore_stat)
        ifar = background_time / fore_fan

        logging.info("calculating fap values")
        fap = numpy.clip(coinc_time/ifar, 0, 1)
        if fore_locs.sum() > 0:
            f['foreground/fan'] = fore_fan
            f['foreground/ifar'] = sec_to_year(ifar)
            f['foreground/fap'] = fap
    else:
        logging.warn("There were no background events, so we could not assign "
                     "any statistic values")
    logging.info("Done") 
    
