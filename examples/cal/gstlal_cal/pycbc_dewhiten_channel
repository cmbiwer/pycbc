#! /usr/bin/python

import argparse
import ctypes
import logging
from _foton import filter_foton
from glue import lal
from glue import segments
from pycbc import types
from pycbc.filter import highpass
from pycbc.filter.zpk import filter_zpk
from pycbc.frame import read_frame

import ROOT
ROOT.gSystem.Load('/usr/lib64/libdmtsigp.so')
ROOT.gSystem.Load('/usr/lib64/libgdsplot.so')
from foton import FilterFile, Filter

# parse command line
parser = argparse.ArgumentParser(usage='pycbc_calibrate_data [--options]',
                  description='Read the detector data and applies filters to calibrate the data.')
parser.add_argument("--gps-start-time", type=int, required=True,
                  help="Time to begin filtering input data.")
parser.add_argument("--gps-end-time", type=int, required=True,
                  help="Time to finish filtering input data.")
parser.add_argument("--frame-cache", type=str, required=True,
                  help="Path to frame cache that contains data.")
parser.add_argument("--filter-file", type=str, required=True,
                  help="Path to foton filter file to extract filterbanks.")
opts = parser.parse_args()

# initializations
channel_names = 'L1:CAL-DARM_ERR_WHITEN_OUT_DQ'

# setup log
logging_level = logging.DEBUG
logging.basicConfig(format='%(asctime)s : %(message)s', level=logging_level)

# read frame cache
logging.info('Reading cache file...')
frame_cache = lal.Cache.fromfilenames([opts.frame_cache])
frame_filenames = [entry.path for entry in frame_cache]

# get channel data from frame files
logging.info('Reading frame files...')
frame_data = read_frame(frame_filenames, channel_names, start_time=opts.gps_start_time, end_time=opts.gps_end_time)

# get filter files
logging.info('Reading filter files...')
filter_file = FilterFile(opts.filter_file)

# put data into arrays
data = filter_zpk(frame_data, [100]*5, [1]*5, 1e-10)

# write input channel data
logging.info('Writing input channel data...')
data.save('output/dewhitened_channel_input.txt')

# filter
logging.info('Filtering...')
data = data.numpy()
data = filter_foton(data, frame_filenames, filter_file, 'SWSTAT', '1000100001', 'CAL_SUM_DARM_ERR')

# write filtered channel data
logging.info('Writing filtered channel data...')
data = types.TimeSeries(data, delta_t=frame_data.delta_t, epoch=frame_data.start_time)
data.save('output/dewhitened_channel_pycbc.txt')

# write output channel data


# exit
logging.info('Done.')
