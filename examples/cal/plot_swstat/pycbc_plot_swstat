#! /usr/bin/python

import argparse
import ctypes
import logging
from glue import lal
from glue import segments
from pycbc import frame
from pycbc import types

import ROOT
ROOT.gSystem.Load('/usr/lib64/libdmtsigp.so')
ROOT.gSystem.Load('/usr/lib64/libgdsplot.so')
from foton import FilterFile, Filter

# parse command line
parser = argparse.ArgumentParser(usage='pycbc_plot_swstat [--options]',
                  description='Reads a frame file and plots the switch status for a filterbank.')
parser.add_argument("--gps-start-time", type=int, required=True,
                  help="Time to begin filtering input data.")
parser.add_argument("--gps-end-time", type=int, required=True,
                  help="Time to finish filtering input data.")
parser.add_argument("--frame-cache", type=str, required=True,
                  help="Path to frame cache that contains data.")
parser.add_argument("--filter-file", type=str, required=True,
                  help="Path to foton filter file to extract filterbanks.")
parser.add_argument("--channel-name", type=str, required=True,
                  help="Channel to check switch status.")
opts = parser.parse_args()

# setup log
logging_level = logging.DEBUG
logging.basicConfig(format='%(asctime)s : %(message)s', level=logging_level)

# read frame cache
logging.info('Reading cache file...')
frame_cache = lal.Cache.fromfilenames([opts.frame_cache])
frame_filenames = [entry.path for entry in frame_cache]

# get filter files
logging.info('Reading filter files...')
filter_file = FilterFile(opts.filter_file)

# loop over bits that state if the filter was on or off
swstat = frame.read_frame(frame_filenames, opts.channel_name,
                  start_time=opts.gps_start_time, end_time=opts.gps_end_time)

print swstat[0]

print bin(int(swstat[0]))

fb = {0:[],
      1:[],
      2:[],
      3:[],
      4:[],
      5:[],
      6:[],
      7:[],
      8:[],
      9:[],
}

for i in range(len(swstat)):

    bits = bin(ctypes.c_int.from_buffer(ctypes.c_float(swstat[i])).value)[2:12]

    for j in range(len(bits)):
        if i == 0:
            fb[j].append( (i,bits[j]) )
        elif i > 0 and bits[j] != fb[j][-1][1]:
            fb[j].append( (i,bits[j]) )

print fb

# exit
logging.info('Done.')
