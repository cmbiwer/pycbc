#! /usr/bin/python

import argparse
import logging

from glue import lal
from glue import segments
from pycbc import frame
from pycbc import types

import ROOT
ROOT.gSystem.Load('/usr/lib64/libdmtsigp.so')
ROOT.gSystem.Load('/usr/lib64/libgdsplot.so')
from foton import FilterFile, Filter

# parse command line
parser = argparse.ArgumentParser(usage='pycbc_calibrate_data [--options]',
                  description='Read the detector data and applies filters to calibrate the data.')
parser.add_argument("--gps-start-time", type=int, required=True,
                  help="Time to begin filtering input data.")
parser.add_argument("--gps-end-time", type=int, required=True,
                  help="Time to finish filtering input data.")
parser.add_argument("--frame-cache", type=str, required=True,
                  help="Path to frame cache that contains data.")
opts = parser.parse_args()

# initializations
channel_names = []
channel_names += ['L1:LSC-DARM_IN1_DQ']
channel_names += ['L1:LSC-DARM_OUT_DQ']

# setup log
logging_level = logging.DEBUG
logging.basicConfig(format='%(asctime)s : %(message)s', level=logging_level)

# read frame cache
logging.info('Reading cache file...')
frame_cache = lal.Cache.fromfilenames([opts.frame_cache])
frame_filenames = [entry.path for entry in frame_cache]

# get channel data from frame files
logging.info('Reading frame files...')
data = frame.read_frame(frame_filenames, channel_names, start_time=opts.gps_start_time, end_time=opts.gps_end_time)

# get filter files
logging.info('Reading filter files...')
filter_file = FilterFile('filter_files/L1OAF.txt')

# put data into arrays
darm_in1 = data[0].numpy()
darm_out = data[1].numpy()

# apply filters to DARM error
logging.info('Filtering DARM error...')
darm_in1_err_filtered = Filter(filter_file['CAL_SUM_DARM_ERR'][0]).apply(darm_in1)

# apply filters to DARM control
logging.info('Filtering DARM control...')
darm_out_m0_filtered = Filter(filter_file['CAL_SUM_DARM_M0'][0]).apply(darm_out)
darm_out_l1_filtered = Filter(filter_file['CAL_SUM_DARM_L1'][0]).apply(darm_out)
darm_out_l2_filtered = Filter(filter_file['CAL_SUM_DARM_L2'][0]).apply(darm_out)
darm_out_l3_filtered = Filter(filter_file['CAL_SUM_DARM_L3'][0]).apply(darm_out)

# sum filtered DARM control
logging.info('Summing filtered DARM control...')
sum_darm_out_filtered = []
for i in range(len(darm_out_m0_filtered)):
    sum_darm_out_filtered.append( darm_out_m0_filtered[i] + darm_out_l1_filtered[i] + darm_out_l2_filtered[i] + darm_out_l3_filtered[i] )

# sum filtered error and filtered control
logging.info('Summing filtered DARM control and filtered error...')
sum_darm_filtered = []
for i in range(len(sum_darm_out_filtered)):
    sum_darm_filtered.append( sum_darm_out_filtered[i] + darm_in1_err_filtered[i] )

# write output
logging.info('Writing data...')
output_data = types.TimeSeries(sum_darm_filtered, delta_t=data[0].delta_t, epoch=data[0].start_time)
output_data.save('output/test.txt')

# exit
logging.info('Done.')
